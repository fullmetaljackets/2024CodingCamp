// RobotBuilder Version: 6.1
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.

// ROBOTBUILDER TYPE: Subsystem.

package frc.robot.subsystems;


import frc.robot.commands.*;
import edu.wpi.first.wpilibj.livewindow.LiveWindow;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;
import edu.wpi.first.wpilibj2.command.SubsystemBase;

// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS
import com.ctre.phoenix.motorcontrol.NeutralMode;
import com.ctre.phoenix.motorcontrol.can.WPI_TalonFX;
import edu.wpi.first.wpilibj.drive.DifferentialDrive;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS


/**
 *
 */
public class DriveTrain extends SubsystemBase {
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
private WPI_TalonFX talonFXFrontRight;
private WPI_TalonFX talonFXFrontLeft;
private DifferentialDrive differentialDrive1;
private WPI_TalonFX talonFXBackLeft;
private WPI_TalonFX talonFXBackRight;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    
    /**
    *
    */
    public DriveTrain() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
talonFXFrontRight = new WPI_TalonFX(1);
 
    /* Factory default hardware to prevent unexpected behavior */
talonFXFrontRight.configFactoryDefault();

        /* Invert Motor? and set Break Mode */
talonFXFrontRight.setInverted(true);
talonFXFrontRight.setNeutralMode(NeutralMode.Coast);

        /* Set the peak and nominal outputs */
talonFXFrontRight.configNominalOutputForward(0, 30);
talonFXFrontRight.configNominalOutputReverse(0, 30);
talonFXFrontRight.configPeakOutputForward(1, 30);
talonFXFrontRight.configPeakOutputReverse(-1, 30);
        



talonFXFrontLeft = new WPI_TalonFX(2);
 
    /* Factory default hardware to prevent unexpected behavior */
talonFXFrontLeft.configFactoryDefault();

        /* Invert Motor? and set Break Mode */
talonFXFrontLeft.setInverted(false);
talonFXFrontLeft.setNeutralMode(NeutralMode.Coast);

        /* Set the peak and nominal outputs */
talonFXFrontLeft.configNominalOutputForward(0, 30);
talonFXFrontLeft.configNominalOutputReverse(0, 30);
talonFXFrontLeft.configPeakOutputForward(1, 30);
talonFXFrontLeft.configPeakOutputReverse(-1, 30);
        



differentialDrive1 = new DifferentialDrive(talonFXFrontRight, talonFXFrontLeft);
 addChild("Differential Drive 1",differentialDrive1);
 differentialDrive1.setSafetyEnabled(true);
differentialDrive1.setExpiration(0.1);
differentialDrive1.setMaxOutput(1.0);


talonFXBackLeft = new WPI_TalonFX(20);
 
    /* Factory default hardware to prevent unexpected behavior */
talonFXBackLeft.configFactoryDefault();

        /* Invert Motor? and set Break Mode */
talonFXBackLeft.setInverted(false);
talonFXBackLeft.setNeutralMode(NeutralMode.Coast);

        /* Set the peak and nominal outputs */
talonFXBackLeft.configNominalOutputForward(0, 30);
talonFXBackLeft.configNominalOutputReverse(0, 30);
talonFXBackLeft.configPeakOutputForward(1, 30);
talonFXBackLeft.configPeakOutputReverse(-1, 30);
        

talonFXBackLeft.follow(talonFXFrontLeft);


talonFXBackRight = new WPI_TalonFX(10);
 
    /* Factory default hardware to prevent unexpected behavior */
talonFXBackRight.configFactoryDefault();

        /* Invert Motor? and set Break Mode */
talonFXBackRight.setInverted(true);
talonFXBackRight.setNeutralMode(NeutralMode.Coast);

        /* Set the peak and nominal outputs */
talonFXBackRight.configNominalOutputForward(0, 30);
talonFXBackRight.configNominalOutputReverse(0, 30);
talonFXBackRight.configPeakOutputForward(1, 30);
talonFXBackRight.configPeakOutputReverse(-1, 30);
        

talonFXBackRight.follow(talonFXFrontRight);



    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
    }

    @Override
    public void periodic() {
        // This method will be called once per scheduler run
        SmartDashboard.putNumber("left motor raw encoder", my_getLeftEncoder());
    }

    @Override
    public void simulationPeriodic() {
        // This method will be called once per scheduler run when in simulation

    }
    public void my_driveArchade(double speed, double turn){
        differentialDrive1.arcadeDrive(speed, turn);
    }
    // Put methods for controlling this subsystem
    // here. Call these from Commands.

    public double my_getLeftEncoder(){
        return talonFXFrontLeft.getSelectedSensorPosition();
    }

    public void mu_resetLeftEncoder(){
        
    }
}

